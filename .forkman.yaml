---

# Most uniq patterns should go first
# !!! ORDER IS IMPORTANT !!!
patterns:

  # Copyright exactly as recommendation from Chef Company
  'Copyright (c) 2016 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code © 2016–2020 Chef Software, Inc"
  'Copyright: Copyright (c) 2017 Chef Software, Inc.': "Biome project based on Chef Habitat's code © 2016–2020 Chef Software, Inc"
  'Copyright (c) 2016-2019 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code © 2016–2020 Chef Software, Inc"
  'Copyright 2015-2019 Chef Software Inc. and/or applicable contributors': "Biome project based on Chef Habitat's code © 2016–2020 Chef Software, Inc"
  'Copyright (c) 2015-2016 The Habitat Maintainers': "Biome project based on Chef Habitat's code © 2016–2020 Chef Software, Inc"

  'Chef license agreement': 'Biome license agreement'
  'Chef License Acceptance': 'Biome License Acceptance'
  'Chef products': 'Biome products'
  'Chef Automate': 'Cinc Automate'
  'Chef Binary Distribution': 'Biome Binary Distribution'
  'Chef Habitat': 'Biome'

  'https://github.com/chef/license-acceptance': 'https://github.com/biome-sh/biome'
  'https://www.chef.io/end-user-license-agreement': 'https://github.com/biome-sh/biome'

  # Product
  'pub const PRODUCT: &str = "hab";': 'pub const PRODUCT: &str = "bio";'

  # Do not ask for license in cli
  'license::accept_license(ui)?;': ''
  'if license_exists() ': 'if true '
  'license::check_for_license_acceptance_and_prompt(ui)?;': ''
  'license_path.join("habitat")': 'license_path.join("biome")'

  accepted-licenses/habitat: accepted-licenses/biome
  accepted-licenses\habitat: accepted-licenses\\biome
  'Hab license already accepted': 'Biome license already accepted'


  # Online resources and links
  '[Habitat](http://habitat.sh)': '[Biome](http://biome.sh)'
  '[Habitat](https://habitat.sh)': '[Biome](https://biome.sh)'
  'http://habitat.sh': 'http://biome.sh'
  'https://habitat.sh': 'https://biome.sh'
  chocolatey.org/packages/habitat: chocolatey.org/packages/biome
  www.habitat.sh: www.habitat.sh
  forums.habitat.sh: forums.habitat.sh
  slack.habitat.sh: slack.habitat.sh
  'https://bldr.habitat.sh': 'https://bldr.biome.sh'
  bldr.acceptance.habitat.sh: bldr.acceptance.habitat.sh
  bldr.habitat.sh: bldr.habitat.sh

  # Keep Original GitHub Issues, PRs, Apps, Links
  github.com/habitat-sh/habitat/issues: github.com/habitat-sh/habitat/issues
  github.com/habitat-sh/habitat/pull: github.com/habitat-sh/habitat/pull
  github.com/apps/habitat-builder: github.com/apps/habitat-builder
  buildkite.com/chef/habitat-sh-habitat-master: buildkite.com/chef/habitat-sh-habitat-master
  buildkite.com/chef/habitat-sh-habitat-main: buildkite.com/chef/habitat-sh-habitat-main
  www.codetriage.com/habitat-sh/habitat: www.codetriage.com/habitat-sh/habitat
  'habitat-sh/habitat#6509': 'habitat-sh/habitat#6509'

  # Contacts
  'The Habitat Maintainers': 'The Biome Maintainers'
  humans@habitat.sh: humans@biome.sh

  # Github Source: Preserve
  habitat-sh/rust-zmq: habitat-sh/rust-zmq
  habitat-sh/ipc-channel: habitat-sh/ipc-channel
  habitat-sh/nitox: habitat-sh/nitox
  habitat-sh/core-plans: habitat-sh/core-plans
  habitat-sh/rust-nats: habitat-sh/rust-nats
  habitat-sh/prost: habitat-sh/prost
  habitat-sh/retry: habitat-sh/retry
  habitat-sh/windows-service: habitat-sh/windows-service
  habitat-sh/release-engineering: habitat-sh/release-engineering
  habitat-sh/habitat-example-plans: habitat-sh/habitat-example-plans
  habitat-sh/homebrew-habitat: habitat-sh/homebrew-habitat
  habitat-sh/clap: habitat-sh/clap
  habitat-sh/structopt: habitat-sh/structopt
  habitat-sh/rants: habitat-sh/rants
  habitat-sh/configopt: habitat-sh/configopt

  # Source code and raw content (direct links)
  'https://raw.githubusercontent.com/habitat-sh/habitat': 'https://raw.githubusercontent.com/habitat-sh/habitat'

  'https://github.com/habitat-sh/habitat/project': 'https://github.com/habitat-sh/habitat/project'
  'https://github.com/habitat-sh/habitat/blob': 'https://github.com/habitat-sh/habitat/blob'
  'https://github.com/habitat-sh/habitat/commit': 'https://github.com/habitat-sh/habitat/commit'
  'https://github.com/habitat-sh/habitat/tree': 'https://github.com/habitat-sh/habitat/tree'
  'https://github.com/habitat-sh/habitat/raw': 'https://github.com/habitat-sh/habitat/raw'

  'https://github.com/habitat-sh/builder/blob': 'https://github.com/habitat-sh/builder/blob'
  'https://github.com/habitat-sh/builder/commit': 'https://github.com/habitat-sh/builder/commit'
  'https://github.com/habitat-sh/builder/tree': 'https://github.com/habitat-sh/builder/tree'
  'https://github.com/habitat-sh/builder/raw': 'https://github.com/habitat-sh/builder/raw'

  'https://github.com/habitat-sh/core-plans/blob': 'https://github.com/habitat-sh/core-plans/blob'
  'https://github.com/habitat-sh/core-plans/commit': 'https://github.com/habitat-sh/core-plans/commit'
  'https://github.com/habitat-sh/core-plans/tree': 'https://github.com/habitat-sh/core-plans/tree'
  'https://github.com/habitat-sh/core-plans/raw': 'https://github.com/habitat-sh/core-plans/raw'

  'https://github.com/chef/chef-oss-practices/blob': 'https://github.com/chef/chef-oss-practices/blob'

  # Github Source: Replace
  habitat-sh/habitat: biome-sh/biome

  'The Habitat-Sh Installation Id is 56940': 'The Habitat-Sh Installation Id is 56940'
  'The Habitat Dev App Id is 5629': 'The Habitat Dev App Id is 5629'

  # Eventually this will be true
  'brew tap habitat-sh/habitat': 'brew tap biome-sh/biome'
  'brew install hab': 'brew install bio'

  # Project path
  components/backline/habitat: components/backline/habitat
  components/launcher/habitat: components/launcher/habitat
  components/pkg-cfize/habitat: components/pkg-cfize/habitat
  components/pkg-dockerize/habitat: components/pkg-dockerize/habitat
  components/pkg-export-docker/habitat: components/pkg-export-docker/habitat
  components/pkg-export-tar/habitat: components/pkg-export-tar/habitat
  components/pkg-mesosize/habitat: components/pkg-mesosize/habitat
  components/plan-build-ps1/habitat: components/plan-build-ps1/habitat
  components/plan-build/habitat: components/plan-build/habitat
  components/studio/habitat: components/studio/habitat
  components/sup/habitat: components/sup/habitat

  components/hab/habitat: components/bio/habitat
  components/hab: components/bio
  src/cli/habitat: src/cli/biome
  src/cli/hab: src/cli/bio

  target/debug/habitat: target/debug/biome
  target/debug/hab: target/debug/bio

  cargo build -p habitat: cargo build -p biome
  cargo build -p hab: cargo build -p bio

  # Docker Studios (biome org has already taken. use biomesh)
  ARG HAB_VERSION: ARG BIO_VERSION
  'ENTRYPOINT ["hab", "sup"]': 'ENTRYPOINT ["bio", "sup"]'
  'FROM habitat-${PACKAGE_TARGET}:hab-base as hab': 'FROM biomesh/bio-${PACKAGE_TARGET}:${BIO_VERSION} as bio'
  'const DOCKER_IMAGE: &str = "habitat/default-studio"': 'const DOCKER_IMAGE: &str = "biomesh/default-studio"'
  'const DOCKER_WINDOWS_IMAGE: &str = "habitat/win-studio"': 'const DOCKER_WINDOWS_IMAGE: &str = "biomesh/win-studio"'
  'COPY --from=hab /hab /hab': 'COPY --from=bio /hab /hab'
  'COPY --from=hab': 'COPY --from=bio'
  'COPY --from=build_image /hab /hab': 'COPY --from=build_image /hab /hab'
  'ADD {{rootfs}}/hab /hab': 'ADD {{rootfs}}/hab /hab'
  'find /hab -type d': 'find /hab -type d'
  habitat/devshell: biomesh/devshell
  acme/hab: acme/bio

  # Translate origin constants
  pkg_origin=core: pkg_origin=biome
  'pkg_origin="core"': 'pkg_origin="biome"'
  '$pkg_origin = "core"': '$pkg_origin = "biome"'
  '$pkg_origin="core"': '$pkg_origin="biome"'

  # When habitat will move to its own origin this will work
  pkg_origin=habitat: pkg_origin=biome
  'pkg_origin="habitat"': 'pkg_origin="biome"'
  '$pkg_origin = "habitat"': '$pkg_origin = "biome"'
  '$pkg_origin="habitat"': '$pkg_origin="biome"'

  # Pkg Name Constants
  pkg_name=habitat: pkg_name=biome
  '$pkg_name="habitat': '$pkg_name="biome'
  '$pkg_name = "habitat': '$pkg_name = "biome'
  'name = "habitat"': 'name = "biome"'

  pkg_name=hab: pkg_name=bio
  '$pkg_name="hab': '$pkg_name="bio'
  '$pkg_name = "hab"': '$pkg_name = "bio"'
  'name = "hab"': 'name = "bio"'


  pkg_path_for habitat: pkg_path_for biome
  pkg_path_for hab: pkg_path_for bio
  Get-HabPackagePath habitat: Get-HabPackagePath biome
  Get-HabPackagePath hab: Get-HabPackagePath bio

  # Constants in tests
  habitat/builder-api-proxy: biome/builder-api-proxy
  habitat/builder-api: biome/builder-api
  habitat/builder-datastore: biome/builder-datastore
  habitat/builder-jobsrv: biome/builder-jobsrv
  habitat/builder-minio: biome/builder-minio
  habitat/builder-originsrv: biome/builder-originsrv
  habitat/builder-router: biome/builder-router
  habitat/builder-sessionsrv: biome/builder-sessionsrv
  habitat/builder-worker: biome/builder-worker

  hab.sup.test: bio.sup.test

  # Habitat UI constants
  '`habitat/` directory which contains the plan': '`habitat/` directory which contains the plan'
  'create a `habitat` directory in your current folder': 'create a `habitat` directory in your current folder'
  'docs/habitat': 'docs/habitat'
  'docs/using-habitat': 'docs/using-habitat'
  'docs/install-habitat': 'docs/install-habitat'
  'All events are published under the "habitat" subject': 'All events are published under the "habitat" subject'
  '"hab program is symlinked into /bin"': '"bio program is symlinked into /bin"'
  'hab binary': 'bio binary'
  'hab package': 'bio package'
  'running as hab': 'running as hab'
  'that contains hab,': 'that contains bio,'
  'It "Includes hab"': 'It "Includes bio"'
  'If SVC_USER or SVC_GROUP is hab': 'If SVC_USER or SVC_GROUP is hab'
  'will use the outside cache key path, whereas the `_hab` function has': 'will use the outside cache key path, whereas the `_bio` function has'
  'Ensure a clean slate in `/hab` for each test': 'Ensure a clean state in `/hab` for each test'
  'the `hab` CLI tool': 'the `bio` CLI tool'
  'full control of the local `/hab` directory': 'full control of the local `/hab` directory'
  'with the `hab` binaries from': 'with the `bio` binaries from'
  'Point to our local hab binaries': 'Point to our local bio binaries'
  'use `hab` to retrieve the hart': 'use `bio` to retrieve the hart'
  'needed by the hab binaries themselves': 'needed by the hab binaries themselves'
  '# by hab.': '# by bio.'
  'get a `hab` binary on the box': 'get a `bio` binary on the box'
  'The `hab` binary': 'The `bio` binary'
  'options for various `hab`': 'options for various `bio`'
  'desired version of `hab`': 'desired version of `bio`'
  'a `hab` macOS Binary': 'a `bio` macOS Binary'
  'to build a `hab` binary': 'to build a `bio` binary'
  'to compile a `hab` binary': 'to compile a `bio` binary'
  'We install hab via': 'We install bio via'
  '### Install `hab`': '### Install `bio`'
  'hab key import does not like carriage returns': 'bio origin key import does not like carriage returns'
  '$proc.UserName | Should -Be "$env:computername\hab': '$proc.UserName | Should -Be "$env:computername\hab'
  '# `/hab` when we start up': '# `/hab` when we start up'


  "SVC_USER metafile with the 'hab'": "SVC_USER metafile with the 'hab'"
  'static ENV_VAR_PREFIX: &str = "HAB";': 'static ENV_VAR_PREFIX: &str = "HAB";'
  "of 'hab' unless specified otherwise in a plan": "of 'bio' unless specified otherwise in a plan"
  "on windows and has a 'hab' account on": "on windows and has a 'bio' account on"
  'there is a hab user on the system': 'there is a hab user on the system'
  'A key name: `habitat`': 'A key name: `biome`'
  'create a hab user': 'create a hab user'
  'add the hab user to the hab group': 'add the hab user to the hab group'
  'sticking the hab user into the group': 'sticking the hab user into the group'
  '// hab user and/or group': '// hab user and/or group'
  'the lower-privileged hab user': 'the lower-privileged hab user'
  'the hab user account on windows': 'the hab user account on windows'

  'Patents: https://chef.io/patents': ''


  # Surprisingly this is safe constant
  Habitat: Biome

  # God, damn, habitat VARIABLES
  build-habitat.rs: build-biome.rs

  # Windows Service Install Script
  habitat.ps1: biome.ps1

  'habitat_': 'biome_'
  'habitat-': 'biome-'

  # Supervisor compatibility habitat <-> biome
  habitat.event.: habitat.event.
  habitat.supervisor.event: habitat.supervisor.event

  ' habitat': ' biome'
  'habitat ': 'biome '

  # plan/init.rs: preserve path for compatibility
  '            ("habitat".into(),': '            ("habitat".into(),'

  '"habitat"': '"biome"'
  .habitat.dev: .biome.dev

  .habitat: .biome

  # Make compatibility with habitat
  habitat/plan.sh: habitat/plan.sh
  habitat/x86_64-linux-kernel2: habitat/x86_64-linux-kernel2
  habitat/x86_64-darwin: habitat/x86_64-darwin
  habitat/plan.ps1: habitat/plan.ps1
  habitat/hooks: habitat/hooks
  habitat\hooks: habitat\\hooks
  habitat/config: habitat/config
  habitat\config: habitat\\config
  habitat/default.toml: habitat/default.toml
  habitat\default.toml: habitat\\default.toml
  PLAN_CONTEXT/habitat: PLAN_CONTEXT/habitat
  PLAN_CONTEXT\habitat: PLAN_CONTEXT\\habitat

  # Make path compatible on Linux
  hab/bin: hab/bin
  hab/etc: hab/etc
  hab/launcher: hab/launcher
  hab/sup: hab/sup
  hab/svc: hab/svc
  hab/pkgs: hab/pkgs
  hab/cache: hab/cache
  hab/studios: hab/studios
  ~/.hab: ~/.hab
  '$HOME/.hab': '$HOME/.hab'
  .hab_pkg: .bio_pkg
  'home.join(".hab")': 'home.join(".hab")'

  'rm -Rf /hab': 'rm -Rf /hab'
  libexec/hab: libexec/bio
  libexec_path/hab: libexec_path/bio
  'hab="${HAB_BIN_DIR}/hab"': 'hab="${HAB_BIN_DIR}/bio"'
  # # Preserve path joining in supervisor
  '            .join("hab")': '            .join("hab")'


  # Make path compatible also on Windows
  hab\bin: hab\\bin
  hab\etc: hab\\etc
  hab\launcher: hab\\launcher
  hab\sup: hab\\sup
  hab\svc: hab\\svc
  hab\pkgs: hab\\pkgs
  hab\cache: hab\\cache
  hab\studios: hab\\studios
  \.hab\: \\.hab\\

  'Join-Path -Path $env:SystemDrive -ChildPath hab': 'Join-Path -Path $env:SystemDrive -ChildPath hab'
  'Join-Path $tempRoot "hab"': 'Join-Path $tempRoot "hab"'
  $env:SYSTEMDRIVE\hab\: $env:SYSTEMDRIVE\\hab\\

  # Double slash in quotes translate too
  hab\\bin: hab\\\\bin
  hab\\etc: hab\\\\etc
  hab\\launcher: hab\\\\launcher
  hab\\sup: hab\\\\sup
  hab\\svc: hab\\\\svc
  hab\\pkgs: hab\\\\pkgs
  hab\\cache: hab\\\\cache
  hab\\studios: hab\\\\studios

  # Core variables
  # Linux
  core/hab-: biome/bio-
  habitat/hab-: biome/bio-
  'core/hab hab': 'biome/bio bio'
  'habitat/hab hab': 'biome/bio bio'
  core/hab: biome/bio
  habitat/hab: biome/bio
  core/windows-service: biome/windows-service
  habitat/windows-service: biome/windows-service

  # Windows
  core\hab-: biome\\bio-
  habitat\hab-: biome\\bio-
  'core\hab hab': 'biome\\bio bio'
  'habitat\hab hab': 'biome\\bio bio'
  core\hab: biome\\bio
  habitat\hab: biome\\bio
  core-hab: biome-bio
  habitat-hab: biome-bio

  /habitat: /habitat

  # Windows Studio Functions and Constants preserve
  Write-HabInfo: Write-HabInfo
  Get-HabServicePID: Get-HabServicePID
  Get-HabPackagePath: Get-HabPackagePath
  Resolve-HabPkgPath: Resolve-HabPkgPath
  Hab: Bio

  '(Test-Command hab)': '(Test-Command bio)'

  '$habVersionCmd': '$bioVersionCmd'
  '$habEnterCmd': '$bioEnterCmd'
  '$habProc': '$bioProc'
  '$habExe': '$bioExe'
  '$habSvc': '$bioSvc'

  # Plan functionons
  _hab(): _bio()

  # Plan variables
  _hab_cmd: _bio_cmd
  hab_dir=: bio_dir=
  hab_package=: bio_package=
  hab_path=: bio_path=
  hab_ssl_cache=: bio_ssl_cache=

  '$hab_dir': '$bio_dir'
  '$hab_package': '$bio_package'
  '$hab_path': '$bio_path'
  '$hab_ssl_cache': '$bio_ssl_cache'

  '${hab_dir}': '${bio_dir}'
  '${hab_package}': '${bio_package}'
  '${hab_path}': '${bio_path}'
  '${hab_ssl_cache}': '${bio_ssl_cache}'
  '${hab}': '${bio}'

  hab_uid =: bio_uid =
  hab_gid =: bio_gid =
  hab_root =: bio_root =
  hab_sup =: bio_sup =
  hab_pkg =: bio_pkg =
  hab_sup_run =: bio_sup_run =
  hab_pkg_path =: bio_pkg_path =
  hab_pkgs_path =: bio_pkgs_path =
  hab_pkg_binary_path =: bio_pkg_binary_path =

  = hab_root: = bio_root
  = hab_hook: = bio_hook



  # Habitat Commands
  'hab --version': 'bio --version'
  'hab supportbundle': 'bio supportbundle'
  'hab bldr': 'bio bldr'
  'hab cli': 'bio cli'
  'hab config': 'bio config'
  'hab file': 'bio file'
  'hab help': 'bio help'
  'hab license': 'bio license'
  'hab origin': 'bio origin'
  'hab pkg': 'bio pkg'
  'hab plan': 'bio plan'
  'hab ring': 'bio ring'
  'hab studio': 'bio studio'
  'hab sup': 'bio sup'
  'hab svc': 'bio svc'
  'hab user': 'bio user'
  'hab apply': 'bio apply'
  'hab install': 'bio install'
  'hab run': 'bio run'
  'hab setup': 'bio setup'
  'hab start': 'bio start'
  'hab stop': 'bio stop'
  'hab term': 'bio term'

  'command -v hab': 'command -v bio'
  'if exists hab': 'if exists bio'
  '$(which hab)': '$(which bio)'
  '"$hab" "$@"': '"$bio" "$@"'

  hab-backline: bio-backline
  hab-plan: bio-plan
  hab-pkg: bio-pkg
  hab-studio: bio-studio
  hab-sup: bio-sup
  hab-launcher: bio-launcher
  hab-launch: bio-launch
  hab-crypt: bio-crypt
  hab-base: bio-base
  hab-user: bio-user
  hab-bats: bio-bats
  hab-channel: bio-channel
  hab-origin: bio-origin
  hab-?: bio-?


  'Start-Process hab': 'Start-Process bio'
  'Get-Process hab': 'Get-Process bio'
  'Get-Ident hab': 'Get-Ident bio'
  'hab $cliVersion': 'bio $cliVersion'

  # Habitat binaries
  'ctx.bin_path().join("hab")': 'ctx.bin_path().join("bio")'
  hab.exe: bio.exe
  bin/hab: bin/bio

  ../hab: ../bio
  ' /hab': ' /hab'

  # Habitat User
  'useradd --system --no-create-home hab': 'useradd --system --no-create-home hab'
  'adduser --system hab': 'adduser --system hab'

  'useradd hab': 'useradd hab'
  'adduser hab': 'adduser hab'
  'useradd --user-group hab': 'useradd --user-group hab'

  '/bin/id -u hab': '/bin/id -u hab'
  '/sbin/useradd hab': '/sbin/useradd hab'
  '/bin/chown -R hab:hab': '/bin/chown -R hab:hab'
  'hab:hab': 'hab:hab'

  'psql -U hab ': 'psql -U bio '
  'su hab -c': 'su hab -c'

  'svc_user=hab': 'svc_user=hab'
  'svc_user="hab"': 'svc_user="hab"'
  'svc_user = "hab"': 'svc_user = "hab"'
  '"svc_user": "hab"': '"svc_user": "hab"'

  'run_user="hab': 'run_user="hab'
  '$username = "hab"': '$username = "hab"'
  "given a 'hab' user": "given a 'hab' user"

  'DEFAULT_USER: &str = "hab"': 'DEFAULT_USER: &str = "hab"'
  'Cow::Owned("hab".into())': 'Cow::Owned("hab".into())'
  'EtcPasswdEntry::new("hab"': 'EtcPasswdEntry::new("hab"'
  'The user to run the service as. The default is hab.': 'The user to run the service as. The default is hab.'
  '("root", "hab")': '("root", "hab")'
  '("hab", "hab")': '("hab", "hab")'
  '("hab", "root")': '("hab", "root")'
  '("hab", _)': '("hab", _)'

  'assert_eq!(users[1].name, "hab");': 'assert_eq!(users[1].name, "hab");'
  'assert_eq!(groups[1].name, "hab");': 'assert_eq!(groups[1].name, "hab");'
  'assert_eq!(users[0].name, "hab");': 'assert_eq!(users[0].name, "hab");'
  'assert_eq!(groups[0].name, "hab");': 'assert_eq!(groups[0].name, "hab");'
  'assert_eq!(users[1].name, "hab");': 'assert_eq!(users[1].name, "hab");'
  'assert_eq!(groups[1].name, "hab");': 'assert_eq!(groups[1].name, "hab");'

  # docker export
  '                           .unwrap_or_else(|| String::from("hab"));': '                           .unwrap_or_else(|| String::from("hab"));'
  'gid, &["hab"]': 'gid, &["hab"]'
  'pkg!(hab,': 'pkg!(bio,'

  # Habitat Group
  'groupadd --system hab': 'groupadd --system hab'
  'addgroup --system hab': 'addgroup --system hab'
  'hab group': 'hab group'

  'svc_group=hab': 'svc_group=hab'
  'svc_group="hab"': 'svc_group="hab"'
  'svc_group = "hab"': 'svc_group = "hab"'
  '"svc_group": "hab"': '"svc_group": "hab"'

  'EtcGroupEntry::group_with_users("hab"': 'EtcGroupEntry::group_with_users("hab"'
  'DEFAULT_GROUP: &str = "hab"': 'DEFAULT_GROUP: &str = "hab"'
  'The group to run the service as. The default is hab.': 'The group to run the service as. The default is hab.'

  'hab:x:42:42:root:/:/bin/sh': 'hab:x:42:42:root:/:/bin/sh'
  'hab:x:42:hab': 'hab:x:42:hab'

  '`hab` user': '`hab` user'
  'user = \"hab\"': 'user = \"hab\"'

  # Root FS
  rootfs/hab: rootfs/hab
  FS_ROOT/hab: FS_ROOT/hab
  'ROOT_PATH:=/hab': 'ROOT_PATH:=/hab'
  'ROOT_PATH = "\hab"': 'ROOT_PATH = "\\hab"'
  'pub const ROOT_PATH: &str = "hab";': 'pub const ROOT_PATH: &str = "hab";'
  'rootfs.join("hab")': 'rootfs.join("hab")'
  'Path::new(&*FS_ROOT_PATH).join("hab")': 'Path::new(&*FS_ROOT_PATH).join("hab")'
  'PathBuf::from(&*FS_ROOT_PATH).join("hab")': 'PathBuf::from(&*FS_ROOT_PATH).join("hab")'
  '$PSScriptRoot\hab': '$PSScriptRoot\\hab'
  'if [ -f "/hab': 'if [ -f "/hab'
  'tar_builder.append_dir_all("hab", hab_pkgs_path);': 'tar_builder.append_dir_all("hab", bio_pkgs_path);'

  # Export Common
  '"core/{}/{}", export_cmd': '"biome/{}/{}", export_cmd'

  # Cargo.lock
  '"hab 0.0.0"': '"bio 0.0.0"'
  'hab {}': 'bio {}'
  'hab{}sup': 'bio{}sup'

  # Mask HABITAT constants
  HABITAT VERSION: BIOME VERSION
  HABITAT_: HABITAT_
  "'HABITAT'": "'HABITAT'"

  # Mask HAB_ constants
  HAB_: HAB_
  HAB-: HAB-


  'let mut hab': 'let mut bio'
  '&mut hab': '&mut bio'
  # Generic rules, keep last
  # Coincidence
  reachable: reachable
  alphabet: alphabet
  searchable: searchable
  dispatchable: dispatchable

  '(hab)': '(bio)'
  'hab::': 'bio::'
  hab_: bio_
  'hab:': 'bio:'
  '[hab': '[bio'
  'hab=': 'bio='
  'hab =': 'bio ='
  ' hab ': ' bio '
  /.hab: /.hab
  .hab: .bio
  '&hab': '&bio'
  '"hab"': '"bio"'
  # user/group combination
  hab/hab: hab/hab
  ' hab': ' bio'

  # tests
  'hab1': 'bio1'
  'hab2': 'bio2'
  '`hab': '`bio'
  'build-hab': 'build-bio'
  '`$hab': '`$bio'
  '/hab-': '/bio-'

# Delete some files which safe to ignore
deletes:
  # We're not going to support public site now
  - www

  # Silence mentions
  - .mailmap
  - .mention-bot
  - CODEOWNERS

  # Development will go in upstream
  - CONTRIBUTING.md
  - MAINTAINERS.md
  - RELEASE.md
  - CODE_OF_CONDUCT.md
  - CHANGELOG_FAKE.md
  - BUILDING.md
  - .github

  # Remove stock travis and other ci-s
  - .travis.yml
  - .expeditor
  - .buildkite
  - tools/one-of-release
  - e2e_env
  - e2e_local.ps1
  - e2e_local_raw_command.sh
  - e2e_local.sh

  # Unused components
  - support/bash_completion.sh

  - components/habitat-chef-io
  - components/hab/install.sh
  - components/hab/install.ps1
  - components/hab/win/chocolateyinstall.ps1
  - components/hab/win/habitat.nuspec
  - components/hab/tests/test_install_script.ps1
  - components/hab/tests/test_install_script.bats

# Excludes from patching contents
excludes:
  - CHANGELOG.md
  - UX_PRINCIPLES.md
  - components/core/tests/fixtures/unhappyhumans-possums-8.1.4-20160427165340-x86_64-linux.hart
  - components/core/tests/fixtures/happyhumans-possums-8.1.4-20160427165340-x86_64-linux.hart
